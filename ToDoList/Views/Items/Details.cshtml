@{
  Layout = "_Layout";
}

@model ToDoList.Models.Item

<h2>Item Details</h2>
<hr />
<h3>@Html.DisplayNameFor(model => model.Description):@Html.DisplayFor(model => model.Description)</h3>

@if(@Model.Categories.Count == 0)
{
  <p>This item does not belong to any categories</p>
}
else{
  <h4>Categories the item belongs to:</h4>
  <ul>
    @foreach(var join in Model.Categories) // model's Categories property now holds list of associated categories; variable is called join to specify we're accessing those categories via the join class
    {
      <li>@join.Category.Name</li>
      @using (Html.BeginForm("DeleteCategory", "Items")) // creates separate delete button for ea category; two args passed into BeginForm(1 - route method to invoke, 2 - controller); Note: .net appends "Controller" to whatever string you pass in
      {
        @Html.Hidden("joinId", @join.CategoryItemId) // two args - Hidden(1- name of route parameter variable we'd like to pass, 2 - actual value of that parameter)
        <input type="submit" value="Delete" />
      }
    }
  </ul>
}

<p>@Html.ActionLink("Back to list", "Index")</p>
<p>@Html.ActionLink("Add a Category", "AddCategory", new { id = Model.ItemId }) </p>
<p>@Html.ActionLink("Edit Item", "Edit", new { id = Model.ItemId })</p> 
@* lines above & below - need to specify ItemId of the Model that is passed into this view *@
<p>@Html.ActionLink("Delete Item", "Delete", new { id = Model.ItemId })</p>